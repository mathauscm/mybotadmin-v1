// /**
//  * @fileoverview Manipula√ß√£o de mensagens do WhatsApp
//  */

// const logger = require('../../utils/logger');
// const apiIntegration = require('./apiIntegration');

// // Estado poss√≠veis para a sess√£o do usu√°rio
// const SessionState = {
//   IDLE: 'idle',
//   AWAITING_ORDER: 'awaiting_order',
//   SELECTING_PRODUCT: 'selecting_product',
//   SELECTING_QUANTITY: 'selecting_quantity',
//   CONFIRMING_ORDER: 'confirming_order',
//   PROVIDING_ADDRESS: 'providing_address',
//   SELECTING_PAYMENT: 'selecting_payment'
// };

// // Op√ß√µes de pagamento
// const paymentMethods = {
//   'pix': 'PIX',
//   'credit-card': 'Cart√£o de Cr√©dito',
//   'cash': 'Dinheiro'
// };

// // Mapa para controlar a sess√£o de cada usu√°rio
// const userSessions = new Map();

// // Cat√°logo de produtos em cache
// let productCatalog = [];

// /**
//  * Define o cat√°logo de produtos
//  * @param {Array} catalog Array com produtos
//  */
// const setCatalog = (catalog) => {
//   productCatalog = catalog;
//   logger.info(`Cat√°logo atualizado com ${productCatalog.length} produtos.`);
// };

// /**
//  * Mensagem de boas-vindas e menu principal
//  * @returns {string} Mensagem formatada
//  */
// function getWelcomeMessage() {
//   return `üç™ *Bem-vindo √† Cookie Shop!* üç™

// Ol√°! Sou o assistente virtual da Cookie Shop. Como posso ajudar voc√™ hoje?

// *Escolha uma op√ß√£o:*

// 1Ô∏è‚É£ *Fazer um pedido*
// 2Ô∏è‚É£ *Ver card√°pio*
// 3Ô∏è‚É£ *Consultar meu pedido*
// 4Ô∏è‚É£ *Falar com atendente*
// 5Ô∏è‚É£ *Hor√°rio de funcionamento*

// Basta enviar o n√∫mero da op√ß√£o desejada!`;
// }

// /**
//  * Formata o cat√°logo para exibi√ß√£o no WhatsApp
//  * @returns {string} Cat√°logo formatado
//  */
// function formatCatalog() {
//   if (productCatalog.length === 0) {
//     return 'Desculpe, nosso cat√°logo est√° indispon√≠vel no momento. Tente novamente mais tarde.';
//   }

//   let message = `üç™ *Card√°pio Cookier* üç™\n\n`;
  
//   productCatalog.forEach((product, index) => {
//     message += `*${index + 1}.* ${product.name} - R$ ${product.price.toFixed(2)}\n`;
//     message += `   _${product.description}_\n\n`;
//   });
  
//   message += `\nPara fazer um pedido, digite *1*.`;
  
//   return message;
// }

// // Outras fun√ß√µes manipuladoras de mensagens aqui (startOrder, handleProductSelection, etc.)
// // ...

// /**
//  * Processa as mensagens recebidas
//  * @param {object} client Cliente WhatsApp
//  * @param {object} message Objeto de mensagem do WhatsApp
//  */
// async function processMessage(client, message) {
//   try {
//     // Ignora mensagens de grupos
//     if (message.from.includes('@g.us')) return;
    
//     const phone = message.from.replace('@c.us', '');
//     const content = message.body.trim();
    
//     logger.info(`Mensagem recebida de ${phone}: ${content}`);
    
//     // Verifica se o usu√°rio tem uma sess√£o ativa
//     const session = userSessions.get(phone);
    
//     let response;
    
//     // Se n√£o tem sess√£o ou est√° no estado IDLE
//     if (!session || session.state === SessionState.IDLE) {
//       // Processa comandos b√°sicos
//       switch (content) {
//         case '1':
//           response = startOrder(phone);
//           break;
          
//         case '2':
//           response = formatCatalog();
//           break;
          
//         case '3':
//           response = await apiIntegration.checkOrderStatus(phone);
//           break;
          
//         case '4':
//           response = `Um atendente entrar√° em contato em breve! Seu n√∫mero j√° est√° na nossa fila de atendimento.`;
//           break;
          
//         case '5':
//           response = getBusinessHours();
//           break;
          
//         default:
//           // Mensagem de boas-vindas para qualquer outra entrada
//           response = getWelcomeMessage();
//       }
//     } else {
//       // Aqui viria a l√≥gica existente de processamento baseado no estado
//       // ...
//     }
    
//     // Envia a resposta ao cliente
//     await client.sendMessage(message.from, response);
//     logger.info(`Resposta enviada para ${phone}`);
    
//   } catch (error) {
//     logger.error('Erro ao processar mensagem:', error);
//     try {
//       await client.sendMessage(message.from, 
//         `‚ùå Desculpe, ocorreu um erro ao processar sua solicita√ß√£o. Por favor, tente novamente ou entre em contato conosco pelo telefone (XX) XXXX-XXXX.`);
//     } catch (sendError) {
//       logger.error('Erro ao enviar mensagem de erro:', sendError);
//     }
//   }
// }

// module.exports = {
//   processMessage,
//   setCatalog,
//   userSessions,
//   SessionState
// };



/**
 * @fileoverview Manipula√ß√£o de mensagens do WhatsApp
 */

const logger = require('../../utils/logger');
const apiIntegration = require('./apiIntegration');
const cookieCatalogService = require('../catalog/cookieCatalogService');

// Estado poss√≠veis para a sess√£o do usu√°rio
const SessionState = {
  IDLE: 'idle',
  AWAITING_ORDER: 'awaiting_order',
  SELECTING_PRODUCT: 'selecting_product',
  SELECTING_QUANTITY: 'selecting_quantity',
  CONFIRMING_ORDER: 'confirming_order',
  PROVIDING_ADDRESS: 'providing_address',
  SELECTING_PAYMENT: 'selecting_payment'
};

// Op√ß√µes de pagamento
const paymentMethods = {
  'pix': 'PIX',
  'credit-card': 'Cart√£o de Cr√©dito',
  'cash': 'Dinheiro'
};

// Mapa para controlar a sess√£o de cada usu√°rio
const userSessions = new Map();

// Cat√°logo de produtos em cache
let productCatalog = [];

/**
 * Define o cat√°logo de produtos
 * @param {Array} catalog Array com produtos
 */
const setCatalog = (catalog) => {
  productCatalog = catalog;
  logger.info(`Cat√°logo atualizado com ${productCatalog.length} produtos.`);
};

/**
 * Mensagem de boas-vindas e menu principal
 * @returns {string} Mensagem formatada
 */
function getWelcomeMessage() {
  return `üç™ *Bem-vindo √† Cookie Shop!* üç™

Ol√°! Sou o assistente virtual da Cookie Shop. Como posso ajudar voc√™ hoje?

*Escolha uma op√ß√£o:*

1Ô∏è‚É£ *Fazer um pedido*
2Ô∏è‚É£ *Ver card√°pio*
3Ô∏è‚É£ *Consultar meu pedido*
4Ô∏è‚É£ *Falar com atendente*
5Ô∏è‚É£ *Hor√°rio de funcionamento*

Basta enviar o n√∫mero da op√ß√£o desejada!`;
}

/**
 * Retorna o hor√°rio de funcionamento
 * @returns {string} Mensagem com hor√°rios
 */
function getBusinessHours() {
  return `üïí *Hor√°rio de Funcionamento* üïí

Segunda a Sexta: 10h00 - 22h00
S√°bado: 10h00 - 23h00
Domingo: 12h00 - 21h00

Fa√ßa seu pedido e receba em casa! üöö`;
}

/**
 * Formata o cat√°logo para exibi√ß√£o no WhatsApp
 * @returns {string} Cat√°logo formatado
 */
function formatCatalog() {
  if (productCatalog.length === 0) {
    return 'Desculpe, nosso cat√°logo est√° indispon√≠vel no momento. Tente novamente mais tarde.';
  }

  let message = `üç™ *Card√°pio Cookier* üç™\n\n`;
  
  productCatalog.forEach((product, index) => {
    message += `*${index + 1}.* ${product.name} - R$ ${product.price.toFixed(2)}\n`;
    message += `   _${product.description}_\n\n`;
  });
  
  message += `\nPara fazer um pedido, digite *1*.`;
  
  return message;
}

// Adicione os m√©todos do seu c√≥digo anterior (startOrder, handleProductSelection, etc.)
// ... (o c√≥digo que voc√™ compartilhou anteriormente)

// Inicializa√ß√£o do cat√°logo
async function initializeCatalog() {
  try {
    const catalog = await cookieCatalogService.getCatalog();
    setCatalog(catalog);
  } catch (error) {
    logger.error('Erro ao inicializar cat√°logo:', error);
  }
}

// Chama a inicializa√ß√£o do cat√°logo
initializeCatalog();

module.exports = {
  processMessage,
  setCatalog,
  userSessions,
  SessionState
};